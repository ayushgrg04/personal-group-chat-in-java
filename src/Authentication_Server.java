
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ayushgrg
 */
public class Authentication_Server extends javax.swing.JFrame {

    /**
     * Creates new form Authentication_Server
     */
    public Authentication_Server() throws IOException {
        initComponents();
        
        onlineusers = new HashMap<>();
        onlineusers2 = new HashMap<>();
        users = new ArrayList<>();
        friendList = new HashMap<>();
        groups = new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usrname = new javax.swing.JTextField();
        pwd = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        serverVar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("                       AUTHENTICATION SERVER");

        jLabel2.setText("USERNAME:");

        jLabel3.setText("PASSWORD:");

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        serverVar.setText("START SERVER");
        serverVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverVarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usrname)
                            .addComponent(pwd, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverVar, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usrname, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pwd, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .addGap(71, 71, 71)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(serverVar, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add button
        String uname = usrname.getText().toString();
        String pswd = pwd.getText().toString();
        addNewUser(usrname.getText().toString(), pwd.getText().toString());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void serverVarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverVarActionPerformed
        try {
            // Start/Stop server

            acceptConn();
        } catch (IOException ex) {
            Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_serverVarActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Authentication_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Authentication_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Authentication_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Authentication_Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Authentication_Server().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
    }
    
    boolean authenticateUser(String user,String pass){
        if(user.equals(null) || user.equals("") || pass.equals("") || pass.equals(null)){
            return false;
        }
        return true;
    }
    
    void addNewUser(String user,String pass)
    {
        if(authenticateUser(user, pass)==false){
            JOptionPane.showMessageDialog(this, "Enter valid username/password");
        }
        else if(existingUser(user)==true){
            JOptionPane.showMessageDialog(this, "Username already exist");
        }
        else{
            String userpasslist = "userpasslist.txt";
                    try {		
                            String entry = user+"#"+pass+"\n";
                            File file = new File(userpasslist);
                            if (!file.exists()) {
                                file.createNewFile();
                                System.out.println("Created new file" + file.getAbsolutePath());
                            }				
                            FileWriter fwrite = new FileWriter(file,true);
                            BufferedWriter bwrite = new BufferedWriter(fwrite);
                            bwrite.write(entry);
                            bwrite.close();
                            fwrite.close();
                            JOptionPane.showMessageDialog(this, "User added successfully!!!");
                            usrname.setText("");
                            pwd.setText("");
//                            System.err.println("Successfult wriiten to file");
                    } 
                    catch (IOException e) {
                            e.printStackTrace();
                    }
        }
    }
    
    void initialiseLists() throws IOException{
        onlineusers.clear();
        onlineusers2.clear();
        users.clear();
        friendList.clear();
        initialiseUsersList();
        initialiseFriendsList();
        initialiseGroupList();
    }
    
    void initialiseUsersList() throws IOException{
        
        try (BufferedReader br = new BufferedReader(new FileReader("userpasslist.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                users.add(line.split("#")[0]);
            }
        }
    }
    
    boolean existingUser(String str){
        if(users.contains(str)){
            return true;
        }
        return false;
    }
    
    void initialiseFriendsList(){
        
        for(String usr: users){
            friendList.put(usr, new ArrayList<>());
        }
        
        try{
            
            String friendsListFilename = "friendsList.txt";
            File file = new File(friendsListFilename);
            if(file == null)
                return;
            if (!file.exists()) file.createNewFile();
            try(BufferedReader br = new BufferedReader(new FileReader(file))) {
                for(String line; (line = br.readLine()) != null; ) {
                    String user[] = line.split("#");
                    friendList.get(user[0]).add(user[1]); 
                }
            }
            
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        
        catch(IOException ex){
            Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void initialiseGroupList(){
         try{
            
            String groupListFilename = "groupsList.txt";
            File file = new File(groupListFilename);
            if(file == null)
                return;
            if (!file.exists()) file.createNewFile();
            try(BufferedReader br = new BufferedReader(new FileReader(file))) {
                for(String line; (line = br.readLine()) != null; ) {
                    String user[] = line.split("#");
                    addingGroup(user[0], user[1]);
                }
            }
            
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        
        catch(IOException ex){
            Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void addingGroup(String usr1, String usr2){
        if(groups.containsKey(usr1)){
                        ArrayList<String> ar = groups.get(usr1);
                        ar.add(usr2);
                        groups.put(usr1, ar);
                    }
                    else{
                        ArrayList<String> ar = new ArrayList<>();
                        ar.add(usr2);
                        groups.put(usr1, ar);
                    }
    }
    
    void addGroup(String stmt){
        String[] gl = stmt.split("#");
        ArrayList<String> at = groups.get(gl[1]);
        if(groups.containsKey(gl[1]) && at.contains(gl[2])){
            try {
                dout.writeUTF("Already Added");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            String groupList = "groupsList.txt";
                        try {		
                                String entry = gl[1]+"#"+gl[2]+"\n";
                                File file = new File(groupList);
                                if (!file.exists()) {
                                    file.createNewFile();
                                    System.out.println("Created new file" + file.getAbsolutePath());
                                }				
                                FileWriter fwrite = new FileWriter(file,true);
                                BufferedWriter bwrite = new BufferedWriter(fwrite);
                                bwrite.write(entry);
                                bwrite.close();
                                fwrite.close();
                                addingGroup(gl[1], gl[2]);
                                try {
                                    dout.writeUTF("Added Group Successfully");
                                } catch (IOException ex) {
                                    Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            //    JOptionPane.showMessageDialog(this, "User added successfully!!!");
                            //    usrname.setText("");
                            //    pwd.setText("");
    //                            System.err.println("Successfult wriiten to file");
                        } 
                        catch (IOException e) {
                                e.printStackTrace();
                        }
        }
    }
    
    
    void connectToChatServer(){
        try {
            Socket sock = new Socket("localhost",chatServerPort);
            DataInputStream dataIn = new DataInputStream(sock.getInputStream());
            String read = dataIn.readUTF();
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(clientmain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    void acceptConn() throws IOException{
        
        if(serverVar.getText().toString().equals("START SERVER")){
            serverVar.setText("STOP SERVER");
            initialiseLists();
            s = new ServerSocket(authServerPort);
            Runnable r = new Runnable() {
                @Override
                public void run() {
                    while(true){  
                        try
                        {
                            
                            System.out.println("trying Accepting");
                            sock = s.accept(); 
                            System.out.print("Server conn accepted");
                            din = new DataInputStream(sock.getInputStream());
                            dout = new DataOutputStream(sock.getOutputStream());
                            String userData = din.readUTF();
                            System.out.println("user data is: "+userData);
                            
                            
                            if(userData.split("#")[0].equals("Auth")){
                                validUser(userData);
                                System.err.println("user adding");
                            }
                            else if(userData.split("#")[0].equals("Logout")){
                                logout(userData);
                                System.out.println("user logout");
                            }
                            else if(userData.split("#")[0].equals("AddFriend")){
                                addFriend(userData);
                            }
                            else if(userData.split("#")[0].equals("Groupadd")){
                                addGroup(userData);
                            }
                            else if(userData.split("#")[0].equals("RefreshList")){
                                System.err.println("Server checking friends");
                                String sp[] = userData.split("#");
                                System.out.println("friend list is: " + friendList.values() );
                                ArrayList<String> friends = friendList.get(sp[1]);
                                
                                String send = "";
                                for(String name : friends){
                                    if(onlineusers.get(name) != null){
                                        send = send+"A:" + name + ":"+ onlineusers.get(name) + ":"+ onlineusers2.get(name) +"#";
                                        System.out.println(""+ name + "is avlaiable");
                                    }
                                    else
                                        send = send+"I:" + name +"#";
                                    System.out.println(""+name);
                                }
                                // for groups
                                for(Map.Entry m:groups.entrySet()){  
                                    ArrayList<String> grpmem = (ArrayList<String>) m.getValue();
                                    if(grpmem.contains(sp[1])){
                                        send = send + "G:" + m.getKey().toString() + "#";
                                        for (String name : grpmem){
                                                if((!name.equals(sp[1])) && onlineusers.get(name) != null){
                                                send = send + "GM:" + m.getKey().toString() + ":" + name + ":"+ onlineusers.get(name) + ":"+ onlineusers2.get(name) +"#";
                                                System.out.println("arraylist is working fine " + name);
                                            }
                                        }
                                        System.out.println(m.getKey()+" "+m.getValue());
                                    }
                                }  
                                if(send.equals("")){
                                    send += 'a';
                                }
                                System.out.println("SENT FRIEND LIST:"+send);
                                
                                send = send.substring(0,send.length()-1);
                                System.out.println("SENT FRIEND LIST:"+send);
                                dout.writeUTF(send);
                                
                            }
                            sock.close();
                        } 
                        catch (IOException ex) {
                            Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
                        }
                      
                }
                }

                
            };
             t1 = new Thread(r);
            t1.start();
            System.out.println("Server started" + "" + (serverVar.getText().toString()));

        }
        else if(serverVar.getText().toString().equals("STOP SERVER")){
            onlineusers.clear();
            onlineusers2.clear();
            users.clear();
            friendList.clear();
            groups.clear();
            serverVar.setText("START SERVER");
            System.out.println("Server closed");
            s.close();
            t1.stop();
        }
    }
    
    void logout(String str){
        onlineusers.remove(str.split("#")[1]);
        onlineusers2.remove(str.split("#")[1]);
         try {
                dout.writeUTF("DONE");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    void validUser(String str) throws IOException{
        String data[] =  str.split("#");
        System.out.println("Trying validation");
        String ff = data[0]+"#"+data[1]+"#"+data[2]+"#"+data[3]+"#"+data[4];
        System.out.println("coming data: "+ ff);
        if(isValid(data[1]+"#"+data[2])){
            System.out.println("User Valid");
            
            try {
                dout.writeUTF("Valid");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            onlineusers2.put(data[1], data[3].toString());
            onlineusers.put(data[1], data[4]);
            
            
        }
        else{
            try {
                dout.writeUTF("InValid");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
             System.out.println("InValid Username and passwd");
        }
        
    }
    
    void friendsFileEntry(String user1,String user2)
    {
            String friendsListFilename = "friendsList.txt";
                    try {		
                            String content = user1+"#"+user2+"\n";
                            File file = new File(friendsListFilename);
                            if (!file.exists()) file.createNewFile();				
                            FileWriter fw = new FileWriter(file,true);
                            BufferedWriter bw = new BufferedWriter(fw);
                            bw.write(content);
                            bw.close();
                            fw.close();
                            System.out.println("friend Successfuly written");
                    } 
                    catch (IOException e) {
                            e.printStackTrace();
                    }
    }
    
    void addFriend(String userdata){
        String data[] = userdata.split("#");
//        System.out.println("Adding started Friend done" + friendList.get(data[1]).toString());
        if(friendList.get(data[1]) != null && friendList.get(data[2]) != null && (!friendList.get(data[1]).contains(data[2]))){
            friendList.get(data[1]).add(data[2]);
            friendList.get(data[2]).add(data[1]);
            
            friendsFileEntry(data[1],data[2]);
            friendsFileEntry(data[2],data[1]);
            
            System.out.println("Add Friend done");
            System.out.println(""+ friendList.values());
            try {
                dout.writeUTF("Valid");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(friendList.get(data[1]).contains(data[2])){
            try {
                dout.writeUTF("NOtExist");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            System.out.println("User doesnt exist");
            try {
                dout.writeUTF("In Valid");
            } catch (IOException ex) {
                Logger.getLogger(Authentication_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    boolean isValid(String str) throws IOException{
        try (BufferedReader br = new BufferedReader(new FileReader("userpasslist.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(""+line);
                if(line.equals(str)){
                    return true;
                }
            }
            return false;
        }
    }
    
  
    
    
    
   
    ArrayList<String> users;
    private HashMap<String, String> onlineusers; // port store
    private HashMap<String, String> onlineusers2; //ip store
    HashMap<String,ArrayList<String> > friendList;
    HashMap<String, ArrayList<String>> groups;
    private ServerSocket s;
    private int authServerPort = 6544;
    DataInputStream din;
    DataOutputStream dout;
    Socket sock;
    Thread t1 = null ;
    private int chatServerPort = 6524;
    private int friendlistServerPort = 6521;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField pwd;
    private javax.swing.JButton serverVar;
    private javax.swing.JTextField usrname;
    // End of variables declaration//GEN-END:variables
}
